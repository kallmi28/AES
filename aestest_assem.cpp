#include <stdio.h>
#include <stdint.h>

/* AES-128 simple implementation template and testing */

/*
Author: Miroslav Kallus, kallumir@fit.cvut.cz
Template: Jiri Bucek 2017
AES specification:
http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf
*/

/* AES Constants */

// forward sbox
const uint8_t SBOX[256] = {
   0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
   0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
   0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
   0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
   0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
   0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
   0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
   0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
   0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
   0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
   0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
   0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
   0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
   0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
   0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
   0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
}; 

const uint8_t rCon[12] = {
	0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
};

/* AES state type */
typedef uint32_t t_state[4];

/* Helper functions */
void hexprint16(uint8_t *p) {
	for (int i = 0; i < 16; i++)
		printf("%02hhx ", p[i]);
	puts("");
}

void hexprintw(uint32_t w) {
	for (int i = 0; i < 32; i += 8)
		printf("%02hhx ", (w >> i) & 0xffU);
}

void hexprintws(uint32_t * p, int cnt) {
	for (int i = 0; i < cnt; i++)
		hexprintw(p[i]);
	puts("");
}
void printstate(t_state s) {
	hexprintw(s[0]);
	hexprintw(s[1]);
	hexprintw(s[2]);
	hexprintw(s[3]);
	puts("");
}

uint32_t word(uint8_t a0, uint8_t a1, uint8_t a2, uint8_t a3) {
	return a0 | (uint32_t)a1 << 8 | (uint32_t)a2 << 16 | (uint32_t)a3 << 24;
}

uint8_t wbyte(uint32_t w, int pos) {
	return (w >> (pos * 8)) & 0xff;
}

// **************** AES  functions ****************
uint32_t subWord(uint32_t w) {
	return word(SBOX[wbyte(w, 0)], SBOX[wbyte(w, 1)], SBOX[wbyte(w, 2)], SBOX[wbyte(w, 3)]);
}

void subBytes(t_state s) {
	s[0] = subWord(s[0]);
	s[1] = subWord(s[1]);
	s[2] = subWord(s[2]);
	s[3] = subWord(s[3]);
}


void shiftRows(t_state s) {
	t_state tmp;

	for(int i = 0; i < 4; ++i)
		tmp[i] = s[i];
	s[0] = word(wbyte(tmp[0], 0), wbyte(tmp[1], 1), wbyte(tmp[2],2), wbyte(tmp[3],3));
	s[1] = word(wbyte(tmp[1], 0), wbyte(tmp[2], 1), wbyte(tmp[3],2), wbyte(tmp[0],3));
	s[2] = word(wbyte(tmp[2], 0), wbyte(tmp[3], 1), wbyte(tmp[0],2), wbyte(tmp[1],3));
	s[3] = word(wbyte(tmp[3], 0), wbyte(tmp[0], 1), wbyte(tmp[1],2), wbyte(tmp[2],3));


}

uint8_t xtime(uint8_t a) {
	uint16_t sh_a = (uint16_t)a << 1;
	if(sh_a > 255)
		return (uint8_t) sh_a ^ 0x1b;
	return sh_a;
}

// not mandatory - mix a single column
uint32_t mixColumn(uint32_t c) {
	uint32_t tmp = c;

	return word((xtime(wbyte(tmp,0)) ^ (xtime(wbyte(tmp, 1)) ^ wbyte(tmp, 1)) ^ wbyte(tmp, 2) ^ wbyte(tmp, 3)),
		   		 (wbyte(tmp,0) ^ xtime(wbyte(tmp, 1)) ^ (xtime(wbyte(tmp, 2)) ^ wbyte(tmp, 2)) ^ wbyte(tmp, 3)),
		   		 (wbyte(tmp,0) ^ wbyte(tmp, 1) ^ (xtime(wbyte(tmp, 2)) ^ (xtime(wbyte(tmp, 3))) ^ wbyte(tmp, 3))),
		   		 (((xtime(wbyte(tmp, 0)) ^ wbyte(tmp, 0)) ^ wbyte(tmp, 1)) ^ wbyte(tmp, 2) ^ xtime(wbyte(tmp, 3))));
}


void mixColumns(t_state s) {
	s[0] = mixColumn(s[0]);
	s[1] = mixColumn(s[1]);
	s[2] = mixColumn(s[2]);
	s[3] = mixColumn(s[3]);
}

/*
* Key expansion from 128bits (4*32b)
* to 11 round keys (11*4*32b)
* each round key is 4*32b
*/
void expandKey(uint32_t ek[44]) {
	/* ??? */

	for (int i = 1; i < 11; ++i)
	{
		uint32_t temp = word(wbyte(ek[4 * i - 1], 1), wbyte(ek[4 * i - 1], 2), wbyte(ek[4 * i - 1], 3), wbyte(ek[4 * i - 1], 0));
		temp = subWord(temp);
		ek[4 * i] = word((wbyte(temp, 0) ^ rCon[i]), wbyte(temp, 1), wbyte(temp, 2), wbyte(temp, 3)) ^ ek [4 * (i - 1)];
		ek[4 * i + 1] = ek[4 * i] ^ ek[4 * (i - 1) + 1];
		ek[4 * i + 2] = ek[4 * i + 1] ^ ek[4 * (i - 1) + 2];
		ek[4 * i + 3] = ek[4 * i + 2] ^ ek[4 * (i - 1) + 3];
	}
}


/* Adding expanded round key (prepared before) */
void addRoundKey(t_state s, uint32_t ek[], short round) {
	
		s[0] = s[0] ^ ek[round * 4 + 0];
		s[1] = s[1] ^ ek[round * 4 + 1];
		s[2] = s[2] ^ ek[round * 4 + 2];
		s[3] = s[3] ^ ek[round * 4 + 3];
}

void aes(uint8_t *in, uint8_t *out, uint8_t *skey)
{
	//... Initialize ...
	unsigned short round = 0;

	t_state state;

	state[0] = word(in[0],  in[1],  in[2],  in[3]);
	state[1] = word(in[4],  in[5],  in[6],  in[7]);
	state[2] = word(in[8],  in[9],  in[10],  in[11]);
	state[3] = word(in[12],  in[13],  in[14],  in[15]);

	printf("IN:  "); printstate(state);

	uint32_t expKey[11 * 4];
	expKey[0] = word(skey[0], skey[1], skey[2], skey[3]);
	expKey[1] = word(skey[4], skey[5], skey[6], skey[7]);
	expKey[2] = word(skey[8], skey[9], skey[10], skey[11]);
	expKey[3] = word(skey[12], skey[13], skey[14], skey[15]);

	expandKey(expKey);

	for (int i = 0; i < 11; i++) {
		printf("K%02d: ", i);
		hexprintws(expKey + 4 * i, 4);
	}

	addRoundKey(state, expKey, round);
	printf("ARK: "); printstate(state);


	for (round = 1; round < 10; ++round)
	{
		subBytes(state);
		shiftRows(state);
		mixColumns(state);
		addRoundKey(state, expKey, round);
	}

	subBytes(state);
	shiftRows(state);
	addRoundKey(state, expKey, round);



	for (int i = 0; i < 16; i++) {
		if (i < 4) out[i] = wbyte(state[0], i % 4);
		else if (i < 8) out[i] = wbyte(state[1], i % 4);
		else if (i < 12) out[i] = wbyte(state[2], i % 4);
		else out[i] = wbyte(state[3], i % 4);
	}
}

//****************************
// MAIN function: AES testing
//****************************
int main(int argc, char* argv[])
{
	int test_failed = 0;
	// test subBytes
	printf("Testing subBytes\n");
	{
		t_state state = { 0x01234567, 0x89abcdef, 0xdeadbeef, 0x00112233 };
		t_state res_state = { 0x7c266e85, 0xa762bddf, 0x1d95aedf, 0x638293c3 };
		subBytes(state);
		printf("0x%08x, 0x%08x, 0x%08x, 0x%08x\n", state[0], state[1], state[2], state[3]);
		for (int i = 0; i < 4; i++) {
			if (state[i] != res_state[i]) { printf("Mismatch at state[%d]!\n", i); test_failed = 1; }
		}
	}
	// test shiftRows
	printf("Testing shiftRows\n");

	{
		t_state state = { 0x01234567, 0x89abcdef, 0xdeadbeef, 0x00112233 };
		t_state res_state = { 0x00adcd67, 0x0111beef, 0x892322ef, 0xdeab4533 };
		shiftRows(state);
		printf("0x%08x, 0x%08x, 0x%08x, 0x%08x\n", state[0], state[1], state[2], state[3]);

		for (int i = 0; i < 4; i++) {
			if (state[i] != res_state[i]) { printf("Mismatch at state[%d]!\n", i); test_failed = 1; }
		}
	}
	// test mixColumns
	printf("Testing mixColumns\n");
	{
		t_state state = { 0x01234567, 0x89abcdef, 0xdeadbeef, 0x00112233 };
		t_state res_state = { 0xcd678923, 0x45ef01ab, 0x9e69ba6f, 0x66334411 };
		mixColumns(state);
		printf("0x%08x, 0x%08x, 0x%08x, 0x%08x\n", state[0], state[1], state[2], state[3]);
		printf("0x%08x, 0x%08x, 0x%08x, 0x%08x\n", res_state[0], res_state[1], res_state[2], res_state[3]);
		for (int i = 0; i < 4; i++) {
			if (state[i] != res_state[i]) { printf("Mismatch at state[%d]!\n", i); test_failed = 1; }
		}
	}
	// test xtime
	printf("Testing xtime\n");
	{
		uint8_t res[256] = { 0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12,
			0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 0x20, 0x22, 0x24, 0x26,
			0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a,
			0x3c, 0x3e, 0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e,
			0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 0x60, 0x62,
			0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76,
			0x78, 0x7a, 0x7c, 0x7e, 0x80, 0x82, 0x84, 0x86, 0x88, 0x8a,
			0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
			0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2,
			0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 0xc0, 0xc2, 0xc4, 0xc6,
			0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda,
			0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee,
			0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 0x1b, 0x19,
			0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d,
			0x03, 0x01, 0x07, 0x05, 0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31,
			0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
			0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49,
			0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45, 0x7b, 0x79, 0x7f, 0x7d,
			0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61,
			0x67, 0x65, 0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95,
			0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85, 0xbb, 0xb9,
			0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad,
			0xa3, 0xa1, 0xa7, 0xa5, 0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1,
			0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5,
			0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9,
			0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5 };
		for (uint16_t i = 0; i < 256; i++) {
			//printf("0x%02hhx,   ", xtime((uint8_t)i));
			if (xtime((uint8_t)i)!=res[i]) { 
				printf("\nMismatch at xtime(0x%02x)! Comparison interrupted.\n", i);  test_failed = 1;
				break;
			}
		}
		puts("");
	}

	// test key expansion
	printf("Testing expandKey\n");
	{
		uint32_t key_w[44] = { 0xdeadbeef, 0xcafebabe, 0xBAADF00D, 0x33221100, 0 /*, ...*/ };
		uint32_t res_key_w[44] = { 
			0xdeadbeef, 0xcafebabe, 0xbaadf00d, 0x33221100,
			0xbd6e2d6c, 0x779097d2, 0xcd3d67df, 0xfe1f76df,
			0x23d5ed56, 0x54457a84, 0x99781d5b, 0x67676b84,
			0x7c50682d, 0x281512a9, 0xb16d0ff2, 0xd60a6476,
			0x44a60f66, 0x6cb31dcf, 0xddde123d, 0x0bd4764b,
			0xf78d474e, 0x9b3e5a81, 0x46e048bc, 0x4d343ef7,
			0x9f6e5fdc, 0x0450055d, 0x42b04de1, 0x0f847316,
			0xd8180013, 0xdc48054e, 0x9ef848af, 0x917c3bb9,
			0x8e991071, 0x52d1153f, 0xcc295d90, 0x5d556629,
			0x2bd5ec59, 0x7904f966, 0xb52da4f6, 0xe878c2df,
			0xb54e504a, 0xcc4aa92c, 0x79670dda, 0x911fcf05, 
		};
		expandKey(key_w);
		for (int i = 0; i < 44; i++) {
			printf("0x%08x, ", key_w[i]);
			if (i % 4 == 3) printf("\n");
		}

		for (int i = 0; i < 44; i++) {
			if (key_w[i] != res_key_w[i]) { 
				printf("Mismatch at key_w[%d]! Comparison interrupted.\n", i);  test_failed = 1;
				break;
			}
		}
		printf("Testing addRoundKey\n");
		// test  AddRoundKey (last round)
		t_state state = { 0x01234567, 0x89abcdef, 0xdeadbeef, 0x00112233 };
		t_state res_state = { 0xb46d152d, 0x45e164c3, 0xa7cab335, 0x910eed36 };
		addRoundKey(state, key_w, 10);
		printf("0x%08x, 0x%08x, 0x%08x, 0x%08x\n", state[0], state[1], state[2], state[3]);
		for (int i = 0; i < 4; i++) {
			if (state[i] != res_state[i]) { printf("Mismatch at state[%d]!\n", i); }
		}

	}

	// test aes encryption
	printf("Testing aes\n");
	{
		uint8_t key[16] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
		uint8_t in[16] =  { 0xab, 0xcd, 0xef, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0x01, 0x23, 0x45, 0x67, 0x89};
		uint8_t out[16] = { 0, /*...*/ };
		uint8_t res_out[16] = { 0xa3, 0x3a, 0xca, 0x68, 0x72, 0xa2, 0x27, 0x74, 0xbf, 0x99, 0xf3, 0x71, 0xaa, 0x99, 0xd2, 0x5a };

		printf("Key: ");
		hexprint16(key);
		puts("");
		printf("In:  ");
		hexprint16(in);
		puts("");

		aes(in, out, key);

		printf("Out: ");
		hexprint16(out);
		puts("");

		for (int i = 0; i < 16; i++) {
			if (out[i] != res_out[i]) { printf("Mismatch at out[%d]!\n", i); test_failed = 1; }
		}
	}
	if (test_failed) {
		printf("|*********** SOME TEST(S) FAILED ***********|\n");
		printf("Please fix me!\n");
	}
	else {
		printf("============== All tests OK! ===============\n");
	}
	return  test_failed;
}
